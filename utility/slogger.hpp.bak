/*
* Copyright (c) 2018 L2Q All rights reserved.
*
* The Original Code and all software distributed under the License are
* distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
* EXPRESS OR IMPLIED, AND L2Q HEREBY DISCLAIMS ALL SUCH WARRANTIES,
* INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
* Please see the License for the specific language governing rights and
* limitations under the License.
*
* @Descripttion: Public Macro Definition
* @Author: l2q
* @Date: 2021/3/8 13:27
* @LastEditors: lucky
* @LastEditTime: 2023/4/7 8:15
 */

#ifndef SLOGGER_HPP
#define SLOGGER_HPP
#include <ostream>

#include "xlogger.hpp"

/**
 * 模仿glog，对spd进行进一步封装，兼容流式日志输出
 * 这个封装目前看来性能可以，但是有bug...
 */
namespace utility
{
const size_t kMaxLogMessageLen = 4 * 1024;

class LogStreamBuf
    : public std::streambuf
{
public:
    // REQUIREMENTS: "len" must be >= 2 to account for the '\n' and '\0'.
    LogStreamBuf(char* buf, int len)
    {
        setp(buf, buf + len - 2);
    }

    // This effectively ignores overflow.
    virtual int_type overflow(int_type ch)
    {
        return ch;
    }

    // Legacy public ostrstream method.
    size_t pcount() const
    {
        return pptr() - pbase();
    }

    char* pbase() const
    {
        return std::streambuf::pbase();
    }
};

class LogStream
    : public std::ostream
{
public:
    LogStream(char* buf, int len, int ctr)
        : std::ostream(nullptr)
        , streambuf_(buf, len)
        , ctr_(ctr)
        , self_(this)
    {
        rdbuf(&streambuf_);
    }

    int ctr() const
    {
        return ctr_;
    }

    void set_ctr(int ctr)
    {
        ctr_ = ctr;
    }

    LogStream* self() const
    {
        return self_;
    }

    // Legacy std::streambuf methods.
    size_t pcount() const
    {
        return streambuf_.pcount();
    }

    char* pbase() const
    {
        return streambuf_.pbase();
    }

    char* str() const
    {
        return pbase();
    }

private:
    LogStream(const LogStream&);
    LogStream&   operator=(const LogStream&);
    LogStreamBuf streambuf_;
    int          ctr_;   // Counter hack (for the LOG_EVERY_X() macro)
    LogStream*   self_;  // Consistency check hack
};

struct LogMessageData
{
    LogMessageData()
        : stream_(message_text_, kMaxLogMessageLen, 0){};

    char                      message_text_[kMaxLogMessageLen + 1];
    LogStream                 stream_;
    int                       line_;              // line number where logging call is.
    size_t                    num_chars_to_log_;  // # of chars of msg to send to log
    const char*               func_;              // basename of file that called LOG
    const char*               file_;              // fullname of file that called LOG
    spdlog::level::level_enum level_;

private:
    LogMessageData(const LogMessageData&);
    void operator=(const LogMessageData&);
};

class LogMessage
{
public:
    LogMessage(spdlog::level::level_enum lvl, const char* file, const char* func, int line)
    {
        // Init(file, line, severity, &LogMessage::SendToLog);
        data_         = new LogMessageData;

        data_->level_ = lvl;
        data_->file_  = file;
        data_->func_  = func;
        data_->line_  = line;
    }

    ~LogMessage()
    {
        data_->num_chars_to_log_                           = data_->stream_.pcount();
        data_->message_text_[data_->num_chars_to_log_] = '\0';
        common::xlogger::getInstance().log_(data_->level_, data_->file_, data_->func_, data_->line_, data_->message_text_);
        delete data_;
    }

    std::ostream& stream()
    {
        return data_->stream_;
    }

    LogMessageData* data_;

private:
    LogMessage(const LogMessage&);
    void operator=(const LogMessage&);
};
}

#define LogVerbose common::LogMessage(spdlog::level::trace, __FILENAME__, __FUNCTION__, __LINE__).stream()
#define LogDebug common::LogMessage(spdlog::level::debug, __FILENAME__, __FUNCTION__, __LINE__).stream()
#define LogInfo common::LogMessage(spdlog::level::info, __FILENAME__, __FUNCTION__, __LINE__).stream()
#define LogWarn common::LogMessage(spdlog::level::warn, __FILENAME__, __FUNCTION__, __LINE__).stream()
#define LogError common::LogMessage(spdlog::level::err, __FILENAME__, __FUNCTION__, __LINE__).stream()
#define LogFatal common::LogMessage(spdlog::level::critical, __FILENAME__, __FUNCTION__, __LINE__).stream()
#endif // SLOGGER_HPP